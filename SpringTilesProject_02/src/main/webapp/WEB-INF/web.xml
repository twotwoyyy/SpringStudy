<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.5" xmlns="http://java.sun.com/xml/ns/javaee"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:schemaLocation="http://java.sun.com/xml/ns/javaee https://java.sun.com/xml/ns/javaee/web-app_2_5.xsd">

   <!-- The definition of the Root Spring Container shared by all Servlets and Filters -->
   <!-- Controller 등록
        DispatcherServlet : Controller
           => 구분 : Front Controller : 요청을 받는 역할
        사용자 정의 => ~Controller (Model) : 요청에 대한 처리 역할
        화면 : JSP / HTML
                    ====
                   ThymeLeaf / React / NextJS
        1. Servlet은 구동 => 동작 (tomcat에 의해 동작)
                                ======= web/xml, server.xml
           = 업체 => 분석해서 발표
              | web.xml => server.xml => Model => Mapper => DAO => JSP
                   | servlet이 등록
                     =======
                     = DispatcherServlet : Spring
                     = FilterDispatcher : 스트럿츠
    -->
   <!-- 
                list.do
      사용자 요청 ======== DispatcherServlet ======= HandlerMapping
                                                  ===============
                                                    | Model에서 @RequestMapping : GET+POST를 동시에 처리
                                                               @GetMapping : GET => SELECT
                                                               @PostMapping : POST => INSERT
                                                               @PutMapping : UPDATE
                                                               @DeleteMapping : DELETE
                                                         | => Model
                                                    개발자 요청 처리
                                                    => return "main/main" => .jsp는 이미 등록
                                                              =========== 확장자 없이 파일명만 기재
                                                              => forward
                                                    => return "redirect:list.do"
                                                              => sendRedirect : request를 초기화(보낼 데이터가 없이 이전의 화면으로 이동)
                                                                 => _ok.do , before.do (cookie) 
                                                         |
                                                    ViewResolve : JSP를 찾아서 Request를 전송하는 역할
                                                         | request 전송
                                                     View => JSP
                                   요청 처리 : Model
                                             =====
                                             Model , VO , DAO , Service, Manager
                                             => 재사용, 유지보수, 수정 ...
                                   화면 출력 : JSP                    
                                   
                                   ==> Model1 VS Model2 차이점
                                   ==> 오버라이딩 VS 오버로딩
                                   ==> GET VS POST / 시멘텍
                                   JSP : Model1 => 간단하다
                                         1. 재사용이 불가능
                                         2. 혼자 작업
                                         3. 보안이 취약하다
                                   MVC : Model2 => 복잡하다
                                         1. 분산
                                         2. 재사용
                                         3. 보안
    -->
    <!-- 
             public class DispatcherServlet extends HttpServlet
             {
                public void init(ServletConfig config)
                {
                   1. web.xml에 등록된 데이터 읽기
                   String xml=config.getInitParameter("contextConfigLocation");
                   ApplicationContext app=
                      new ClassPathApplicationContext(xml)
                   => 등록된 클래스를 메모리 할당
                }
                public void service(HttpSercletRequest request,
                                    HttpServletResponse response)
                {
                    사용자 요청을 받아서 처리된 결과를 JSP로 전송
                }
                public void destroy(){
                     servlet 메모리 해제 => 새로고침, 화면 변경
                }
             }
          -->
   <servlet>
      <servlet-name>dispatcher</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <!--  
      XML로 환경 설정이 된 경우 사용-->
      <init-param>
         <param-name>contextConfigLocation</param-name>
         <param-value>/WEB-INF/config/application-*.xml</param-value>
      </init-param>
      
      <!-- 스프링 5 : 자바로 환경설정 -->
      <!-- <init-param>
        <param-name>contextClass</param-name>
        <param-value>
          org.springframework.web.context.support.AnnotationConfigWebApplicationContext
        </param-value>
      </init-param>
      <init-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>com.sist.config.MvcConfig</param-value>
      </init-param>-->
   </servlet>
      
   <servlet-mapping>
      <servlet-name>dispatcher</servlet-name>
      <url-pattern>*.do</url-pattern>
   </servlet-mapping>
   
   <!-- 한글 변환 -->
   <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>
            org.springframework.web.filter.CharacterEncodingFilter
        </filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
   <!-- 에러별 처리 -->
   <!-- 보안 등록 : Security : 권한부여, 자동 로그인, 카카오, 네이버를 이용한 로그인 -->

</web-app>
