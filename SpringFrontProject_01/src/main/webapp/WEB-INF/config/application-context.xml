<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	
	<!-- 사용자 정의 클래스 등록 -->
	<context:component-scan base-package="com.sist.*"/>
	<!-- 선별적인 메모리 할당 
		 스프링 관리 요청 : DAO,Manager,Service .. 
		 @Component, 
		 @Repository, 
		 @Service, 
		 @Controller, 
		 @RestController, 
		 @ControllerAdvice, 
		 @Configuration
	 -->
	<!-- AOP 등록 -->
	<aop:aspectj-autoproxy/>
	<!-- ViewResolver 등록 -->
	<!-- 
		DispatcherSevlet <=======> WebApplicationContext 
		       |                            |
		  요청을 받아서                  등록된 클래스 관리 
		  결과값 전송                      (컨테이너)
		  
	   1) 클래스 관리 요청 => DispatcherServlet이 XML의 경로명을 받아서 WebApplicationContext로 전송 => 등록 클래스 메모리 할당 후 전송
		  <init-param>
	         <param-name>contextConfigLocation</param-name>
	         <param-value>/WEB-INF/config/application-*.xml</param-value>
	      </init-param>
	   2) Model 클래스를 찾아주는 역할 
	      =========== 구분자 
	       1. @Controller
	       2. @RestController 
	       =================== 클래스 구분
	       1. @GetMapping()
	       2. @PostMapping()
	       3. @RequestMapping() => PutMapping(), DeleteMapping()
	       ===================== 메소드 구분 
	       => HandlerMapping (자동 생성) 
	          web.xml에 등록하면 자동 생성 
	   3) View(JSP)를 찾아주는 역할 => ViewResolver
	      => 경로명 / 확장자 전송 => 자바 전용이 아니다 
	         = preifx(경로명), suffix(확장자)
	         = 확장자가 존재 => 화면 이동시에 .jsp를 붙이지 않는다 
	   => Mapper : 1개 테이블 1개 제어 
	               BoardDAO, ReplyDAO => @Autowired
	   => Mapper 여러 개를 모아서 처리 => Service 
	               BoardDAO, ReplyDAO => BoardService
	     => 요청 => Service => DAO => 오라클 
	        요청 <= Service <= DAO <= 오라클 
	  
	  세팅 
	    1. 라이브러리 추가 : Maven => Spring Framework 
	                     Gradle => Spring-Boot / Kotlin
	                     => 라이브러리 관리 / 프로젝트 관리 / 배포 관리 / 버전 관리 
	       | pom.xml => mvnrepository.com
	                 => 없는 경우(지원하지 않는 경우) => lib 폴더에 가져다 놓고 <systemPath>에 가져다 놓기 
	    2. Spring5 => jdk 1.8 이상 
	    3. 클래스 등록 
	       xml의 단점 : 파일 크기가 크다 => 속도가 느려진다 
	      => application-context.xml
	      => application-datasource.xml
	      => application-security.xml
	      => application-task.xml
	      => application-websocket.xml
	    4. Mapper 등록 (MyBatis)
	    5. Model을 만들어서 요청에 대한 처리
	       = 요청에 대한 화면 이동
	         @Controller
	         return "경로명/파일명" => JSP파일에 request를 전송
	                                결과값을 전송 
	                                request.setAttribute()
	                                model.addAttribute()
	                                => forward
	         return "redirect:~~" => 이미 만들어진 화면 이동
	                                request가 초기화
	                                _ok.do
	                                sendRedirect
	       = 요청에 따라서 데이터만 전송
	         @RestController => 자바스크립트나 다른 언어와 연동 
	                            ========================
	                            | JSON
	         => 일반 문자열 / <script>
	         => JSON : 자바스크립트 객체 표현법 
	            자바 / 자바스크립트 호환 
	            ~VO => {} (Object)
	            List => [] (Array)
	    6. 응답을 받아서 처리 => JSP
	       ============== Ajax, View, React 
	       Vue
	         가볍다 / 양방향 / React보다 간단하다 (어렵다) => jsx
	                        => React-Query / Redux / Mobix
	      => 처리 메소드
	         리턴형
	         매개변수 : 사용자가 전송한 값을 받는다
	                  detail.do?no=1
	                   => (int no)
	                  detail.do?no=1&fd=aaa&page=1
	                   => (int no,String fd,int page)
	                  (BoardVO vo) => insert/update
	                  ============ 커맨드 객체
	                  | => <input type=text name=name>
	                                             ==== 반드시 VO안에 setter로 제작되어 있어야 한다 
	                  => 내장 객체
	                     Cookie : 저장 => HttpServletResponse (다운로드 시)
	                              읽기 => HttpServletRequest 
	                     데이터 전송 : Model 
	                     로그인 => HttpSession 
	                     Redirect => 데이터 전송 => RedirectAttributes
	                     return "redirect:detail.do?no="+no+"&curpage="+page
	                     => RedirectAttributes 이용 => ra.addAttribute("no",no)
	                     => ra.addAttribute("curpage",page)
	                 => 한글 변환은 web.xml에 등록 
	         메소드명 : 개발자 마음 
	         => /login/admin/1234 => react..
	 -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
		p:prefix="/"
		p:suffix=".jsp"
	/>
	<!-- return "main/maiun";
	     => /main/main.jsp => JSP를 찾는다
	       == 접두어    ==== 접미어 
	 -->
</beans>
